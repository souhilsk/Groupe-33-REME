#for concerned crimes
import pandas as pd
import numpy as np

# === 1. Charger le fichier Excel brut ===
file_path = '/Users/tommasospreij/Desktop/REME/Criminal Offenses Leading to Automatic Expulsion by Residency Status.xlsx'
df_raw = pd.read_excel(file_path, sheet_name='px-x-1903020100_102', header=None)

# === 2. Extraire les années depuis la ligne 2 (index 2) ===
years = df_raw.iloc[2, 4:].tolist()

# === 3. Garder uniquement les lignes contenant des groupes ===
data_rows = df_raw.iloc[3:, :]
data_rows = data_rows.dropna(subset=[3])  # garde lignes avec étiquette en col 3

# === 4. Regrouper les types d'étrangers sous "Foreigner" ===
group_map = {
    'suisses': 'Swiss',
    'résidente': 'Foreigner',
    'asile': 'Foreigner',
    'autres': 'Foreigner'
}

# === 5. Extraire et transformer les données ===
records = []

for i in range(data_rows.shape[0]):
    label = str(data_rows.iloc[i, 3]).lower()
    for key in group_map:
        if key in label:
            group = group_map[key]
            values = data_rows.iloc[i, 4:].values
            for j, year in enumerate(years):
                try:
                    val = values[j]
                    val = np.nan if str(val).strip() in ["*", "X", "x", ""] else float(val)
                    records.append({"year": int(year), "group": group, "count": val})
                except:
                    continue
            break

# === 6. Nettoyage final et agrégation ===
df_cleaned = pd.DataFrame(records)
df_cleaned = df_cleaned.dropna()
df_cleaned = df_cleaned.groupby(["year", "group"], as_index=False).agg({"count": "sum"})

# === 7. Sauvegarder le résultat dans un nouveau fichier Excel ===
output_file = "prevenus_simplifie_par_annee_et_groupe.xlsx"
df_cleaned.to_excel(output_file, index=False)

print(f"✅ Fichier nettoyé sauvegardé sous : {output_file}")





  
#for non concerned crimes
import pandas as pd
import numpy as np

# === 1. Charger le fichier Excel brut ===
file_path = '/Users/tommasospreij/Desktop/REME/Control_Group_Offenses_Not_Subject_to_Expulsion.xlsx'
df_raw = pd.read_excel(file_path, sheet_name=0, header=None)

# === 2. Extraire les années depuis la ligne 2 (index 2) ===
years = df_raw.iloc[2, 4:].tolist()

# === 3. Garder uniquement les lignes contenant des groupes ===
data_rows = df_raw.iloc[3:, :]
data_rows = data_rows.dropna(subset=[3])  # on garde les lignes où col 3 (group) est remplie

# === 4. Créer une map pour regrouper les catégories d'étrangers ===
group_map = {
    'suisses': 'Swiss',
    'résidente': 'Foreigner',
    'asile': 'Foreigner',
    'autres': 'Foreigner'
}

# === 5. Extraire et transformer les données ===
records = []

for i in range(data_rows.shape[0]):
    label = str(data_rows.iloc[i, 3]).lower()
    for key in group_map:
        if key in label:
            group = group_map[key]
            values = data_rows.iloc[i, 4:].values
            for j, year in enumerate(years):
                try:
                    val = values[j]
                    val = np.nan if str(val).strip() in ["*", "X", "x", ""] else float(val)
                    records.append({"year": int(year), "group": group, "count": val})
                except:
                    continue
            break

# === 6. Nettoyage final et agrégation ===
df_cleaned = pd.DataFrame(records)
df_cleaned = df_cleaned.dropna()
df_cleaned = df_cleaned.groupby(["year", "group"], as_index=False).agg({"count": "sum"})

# === 7. Sauvegarder dans un nouveau fichier Excel ===
output_file = "prevenus_controle_simplifie_par_annee_et_groupe.xlsx"
df_cleaned.to_excel(output_file, index=False)

print(f"✅ Fichier nettoyé sauvegardé sous : {output_file}")



#for concerned crimes per canton
import pandas as pd
import numpy as np

# === 1. Charger le fichier Excel brut ===
file_path = '/Users/tommasospreij/Desktop/REME/Crime count top5 canton highestlowest yes vote.xlsx'
df_raw = pd.read_excel(file_path, sheet_name=0, header=None)

# === 2. Extraire les années depuis la ligne 2 (index 2), à partir de la colonne 6 ===
years = df_raw.iloc[2, 6:].tolist()

# === 3. Définir le mapping pour grouper les catégories d'étrangers ===
group_map = {
    'suisses': 'Swiss',
    'résidente': 'Foreigner',
    'asile': 'Foreigner',
    'autres': 'Foreigner'
}

# === 4. Traiter les blocs de 4 lignes (par canton) ===
records = []

for i in range(3, df_raw.shape[0], 4):  # chaque canton occupe 4 lignes
    try:
        canton = df_raw.iloc[i, 3]  # canton = colonne 4 (index 3)
        if pd.isna(canton):
            continue

        for j in range(4):  # 4 groupes par canton
            row = df_raw.iloc[i + j]
            label = str(row[5]).lower()  # groupe = colonne 6 (index 5)
            for key in group_map:
                if key in label:
                    group = group_map[key]
                    values = row[6:].values  # données annuelles à partir de la colonne 7
                    for k, year in enumerate(years):
                        try:
                            val = values[k]
                            val = np.nan if str(val).strip() in ["*", "X", "x", ""] else float(val)
                            records.append({
                                "year": int(year),
                                "canton": canton,
                                "group": group,
                                "count": val
                            })
                        except:
                            continue
                    break
    except:
        continue

# === 5. Nettoyer et agréger les résultats ===
df_cleaned = pd.DataFrame(records)
df_cleaned = df_cleaned.dropna()
df_cleaned = df_cleaned.groupby(["year", "canton", "group"], as_index=False).agg({"count": "sum"})

# === 6. Sauvegarder le résultat ===
output_file = "prevenus_nettoye_par_canton.xlsx"
df_cleaned.to_excel(output_file, index=False)

print(f"✅ Données nettoyées et sauvegardées dans : {output_file}")
